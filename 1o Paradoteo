#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define N 100

int Menu();
void print(int list1[]);
void swap(int * x, int *y);
void Merge(int list1[], int left, int mid, int right);
void Heapify(int list1[], int n, int i);

void BubbleSort(int list1[]);
void QuickSort(int list1[], int left, int right);
void MergeSort(int list1[], int left, int right);
void SelectionSort(int list1[]);
void InsertionSort(int list1[]);
void ShellSort(int list1[]);
void HeapSort(int list1[], int n);



int main()
{
	srand(time(NULL));
	
	int choice;
	int i, list1[N], list2[N];
	
	for (i=0; i<N; i++)
		list1[i] = rand();
	
	/* calling menu function and
	 choosing a sorting technique */
	while (choice != 8)
	{
		choice = Menu();
		switch (choice)
		{
			case 1:
				BubbleSort(list1);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 2: 
				QuickSort(list1, 0, N-1);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 3:
				MergeSort(list1, 0 , N-1);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 4: 
				SelectionSort(list1);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 5:
				InsertionSort(list1);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 6: 
				ShellSort(list1);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 7:
				HeapSort(list1, N);
				printf("\n\nFinished Sorting!\n\n");
				print(list1);
				break;
			case 8:
				printf("End of programm!");
				exit(0);
				break;
			default:
				printf("\n\nPlease enter 1-8 !\n\n");
				system("pause");
				break;
		}
	}
	return 0;
}

void swap(int *x, int *y) 
{
	int temp;
	
	temp = *x;
	*x = *y;
	*y = temp;
}

void BubbleSort(int list1[])
{
	int i, temp;
	
	while(1)
	{
		temp=0;
		for (i=0; i<N-1; i++)
		{
			if (list1[i] > list1[i+1])
			{
				swap(&list1[i], &list1[i+1]);
				temp++;
			}
		}
		if (temp==0)
			break;
	}
}

void QuickSort(int list1[], int left, int right)
{
	int pivot, right_arrow, left_arrow, mid;
    
    mid = (left+right)/2;
    pivot = list1[mid];
    left_arrow = left;
    right_arrow = right;
   
	do
	{
        while (list1[left_arrow] < pivot) 
			left_arrow++;
		while (list1[right_arrow] > pivot) 
			right_arrow--;
		if (left_arrow <= right_arrow) {
			swap(&list1[left_arrow], &list1[right_arrow]);
			left_arrow++;
			right_arrow--;
		}

	} while (left_arrow <= right_arrow);
	
	if (left < right_arrow)
	    QuickSort(list1, left, right_arrow);
	if (left_arrow < right)
	    QuickSort(list1, left_arrow, right);
}

void MergeSort(int list1[], int left, int right)
{
	int mid;
	
	if (left < right)
	{
	    // mid is the point where the list is divided into two sublists
		mid = 1 + (right - left) / 2;
		
		MergeSort(list1, 1, mid);
		MergeSort(list1, mid+1, right);
		
		Merge(list1, left, mid, right);
	}
}

void Merge(int list1[], int left, int mid, int right)
{
	// Create L ? A[p..q] and M ? A[q+1..r]
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], M[n2];

    for (int i = 0; i < n1; i++)
        L[i] = list1[left + i];
    for (int j = 0; j < n2; j++)
        M[j] = list1[mid + 1 + j];

    // Maintain index of sub-lists and main list
    int i, j, k, p;
    i = 0;
    j = 0;
    k = p;

    /* Until we reach either end of either L or M, pick larger among
       elements L and M and place them in the correct position at A[p..r] */
    while (i < n1 && j < n2) {
        if (L[i] <= M[j])
        {
            list1[k] = L[i];
            i++;
        }
        else
        {
            list1[k] = M[j];
            j++;
        }
        k++;
    }

    /* When we run out of elements in either L or M,
       pick up the remaining elements and put in A[p..r] */
    while (i < n1)
    {
        list1[k] = L[i];
        i++;
        k++;
    }

    while (j < n2)
    {
        list1[k] = M[j];
        j++;
        k++;
    }
}

void SelectionSort(int list1[])
{
	int i, j, k, min;
	for (i=0; i<N; i++)
	{
		min	= list1[i];
		k = i;
		for (j=i; j<N; j++)
		{
			if (list1[j] < min)
			{
				k = j;
				min = list1[j];
			}
		}
		swap(&list1[i], &list1[k]);	
	}	
}

void InsertionSort(int list1[])
{
	int i, j, temp;
	for (j=1; j<N; j++)
	{
	    i = j-1;
	    temp = list1[j];
	    while (i>=0)
	    {
	        if (temp >= list1[i])
	            break;
	        list1[i+1] = list1[i];
	        i -= 1;
	    }
	    list1[i+1] = temp;
	}
}

void ShellSort(int list1[])
{
	int i, j, s, pass, qq;
	double h[20];
	
	for (i=0; i<20; i++)
	    h[i] = 2^(i-1);
	    
	for (s=19; s>=0; s--)
	{
	    pass = h[s];
	    for (j=pass; j<N; j++)
	    {
	        i = j-pass;
	        qq = list1[j];
	        do{
	            if (qq >= list1[i])
	                break;
	            list1[i+pass] = list1[i];
	            i = i-pass;
	        }while (i>=0);
	        list1[i+pass] = qq;
	    }
	}
}

void Heapify(int list1[], int n, int i) {
    // Find largest among root, left child and right child
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;
  
    if (left < n && list1[left] > list1[largest])
      largest = left;
  
    if (right < n && list1[right] > list1[largest])
      largest = right;
  
    // Swap and continue heapifying if root is not largest
    if (largest != i) {
      swap(&list1[i], &list1[largest]);
      Heapify(list1, n, largest);
    }
}

void HeapSort(int list1[], int n) {
    // Build max heap
    for (int i = n / 2 - 1; i >= 0; i--)
      Heapify(list1, n, i);
  
    // Heap sort
    for (int i = n - 1; i >= 0; i--) {
      swap(&list1[0], &list1[i]);
  
      // Highest element at root again
      Heapify(list1, i, 0);
    }
}

void print(int list1[])
{
	for (int i=0; i<N; i++)
		printf("%d\n", list1[i]);
}

int Menu()
{
	int choice = 0;
	printf("       MENU      \n");
	printf("===================\n\n");
	printf("1. Bubble-Sort\n");
	printf("2. Quick-Sort\n");
	printf("3. Merge-Sort\n");
	printf("4. Selection-Sort\n");
	printf("5. Insertion-Sort\n");
	printf("6. Shell-Sort\n");
	printf("7. Heap-Sort\n");
	printf("8. Exit\n\n");
	
	printf("Select a sorting technique: ");
	scanf("%d", &choice);
	
	return choice;
}
